
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001a0  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000197  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000108  00000000  00000000  0000046b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000fe  00000000  00000000  00000573  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000674  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000158  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008a  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000008c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 80 00 	call	0x100	; 0x100 <main>
  8e:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_init>:
    }
}

void uart_init(uint16_t baud)
{
	unsigned int BAUD=F_CPU/16/baud-1;
  96:	9c 01       	movw	r18, r24
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	60 e4       	ldi	r22, 0x40	; 64
  9e:	72 e4       	ldi	r23, 0x42	; 66
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 8d 00 	call	0x11a	; 0x11a <__divmodsi4>
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	31 09       	sbc	r19, r1
	UBRR0H = (unsigned char)(BAUD>>8);
  ac:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char)BAUD;
  b0:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1 << RXCIE0);
  b4:	88 e9       	ldi	r24, 0x98	; 152
  b6:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (3<<UCSZ00);
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 c2 00 	sts	0x00C2, r24
  c0:	08 95       	ret

000000c2 <uart_send>:
}

void uart_send(char ch)
{
	while ( !( UCSR0A & (1<<UDRE0)));
  c2:	e0 ec       	ldi	r30, 0xC0	; 192
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	95 ff       	sbrs	r25, 5
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <uart_send+0x4>
	UDR0 = ch;
  cc:	80 93 c6 00 	sts	0x00C6, r24
  d0:	08 95       	ret

000000d2 <uart_read>:
}

char uart_read()
{
	while ( !(UCSR0A & (1<<RXC0)) );
  d2:	e0 ec       	ldi	r30, 0xC0	; 192
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	ec f7       	brge	.-6      	; 0xd6 <uart_read+0x4>
		return UDR0;
  dc:	80 91 c6 00 	lds	r24, 0x00C6
}
  e0:	08 95       	ret

000000e2 <uart_print>:

void uart_print(char* str)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ec 01       	movw	r28, r24
	while(*str)
  e8:	88 81       	ld	r24, Y
  ea:	88 23       	and	r24, r24
  ec:	31 f0       	breq	.+12     	; 0xfa <uart_print+0x18>
  ee:	21 96       	adiw	r28, 0x01	; 1
		uart_send(*str++);
  f0:	0e 94 61 00 	call	0xc2	; 0xc2 <uart_send>
		return UDR0;
}

void uart_print(char* str)
{
	while(*str)
  f4:	89 91       	ld	r24, Y+
  f6:	81 11       	cpse	r24, r1
  f8:	fb cf       	rjmp	.-10     	; 0xf0 <uart_print+0xe>
		uart_send(*str++);
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <main>:
char uart_read();
void uart_print(char* str);

int main(void)
{
    uart_init(9600);
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	95 e2       	ldi	r25, 0x25	; 37
 104:	0e 94 4b 00 	call	0x96	; 0x96 <uart_init>
	uart_print("Hello World \r\n");
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	0e 94 71 00 	call	0xe2	; 0xe2 <uart_print>
	while (1) 
    {
		uart_send(uart_read());
 110:	0e 94 69 00 	call	0xd2	; 0xd2 <uart_read>
 114:	0e 94 61 00 	call	0xc2	; 0xc2 <uart_send>
    }
 118:	fb cf       	rjmp	.-10     	; 0x110 <main+0x10>

0000011a <__divmodsi4>:
 11a:	05 2e       	mov	r0, r21
 11c:	97 fb       	bst	r25, 7
 11e:	1e f4       	brtc	.+6      	; 0x126 <__divmodsi4+0xc>
 120:	00 94       	com	r0
 122:	0e 94 a4 00 	call	0x148	; 0x148 <__negsi2>
 126:	57 fd       	sbrc	r21, 7
 128:	07 d0       	rcall	.+14     	; 0x138 <__divmodsi4_neg2>
 12a:	0e 94 ac 00 	call	0x158	; 0x158 <__udivmodsi4>
 12e:	07 fc       	sbrc	r0, 7
 130:	03 d0       	rcall	.+6      	; 0x138 <__divmodsi4_neg2>
 132:	4e f4       	brtc	.+18     	; 0x146 <__divmodsi4_exit>
 134:	0c 94 a4 00 	jmp	0x148	; 0x148 <__negsi2>

00000138 <__divmodsi4_neg2>:
 138:	50 95       	com	r21
 13a:	40 95       	com	r20
 13c:	30 95       	com	r19
 13e:	21 95       	neg	r18
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	4f 4f       	sbci	r20, 0xFF	; 255
 144:	5f 4f       	sbci	r21, 0xFF	; 255

00000146 <__divmodsi4_exit>:
 146:	08 95       	ret

00000148 <__negsi2>:
 148:	90 95       	com	r25
 14a:	80 95       	com	r24
 14c:	70 95       	com	r23
 14e:	61 95       	neg	r22
 150:	7f 4f       	sbci	r23, 0xFF	; 255
 152:	8f 4f       	sbci	r24, 0xFF	; 255
 154:	9f 4f       	sbci	r25, 0xFF	; 255
 156:	08 95       	ret

00000158 <__udivmodsi4>:
 158:	a1 e2       	ldi	r26, 0x21	; 33
 15a:	1a 2e       	mov	r1, r26
 15c:	aa 1b       	sub	r26, r26
 15e:	bb 1b       	sub	r27, r27
 160:	fd 01       	movw	r30, r26
 162:	0d c0       	rjmp	.+26     	; 0x17e <__udivmodsi4_ep>

00000164 <__udivmodsi4_loop>:
 164:	aa 1f       	adc	r26, r26
 166:	bb 1f       	adc	r27, r27
 168:	ee 1f       	adc	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	a2 17       	cp	r26, r18
 16e:	b3 07       	cpc	r27, r19
 170:	e4 07       	cpc	r30, r20
 172:	f5 07       	cpc	r31, r21
 174:	20 f0       	brcs	.+8      	; 0x17e <__udivmodsi4_ep>
 176:	a2 1b       	sub	r26, r18
 178:	b3 0b       	sbc	r27, r19
 17a:	e4 0b       	sbc	r30, r20
 17c:	f5 0b       	sbc	r31, r21

0000017e <__udivmodsi4_ep>:
 17e:	66 1f       	adc	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	88 1f       	adc	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	1a 94       	dec	r1
 188:	69 f7       	brne	.-38     	; 0x164 <__udivmodsi4_loop>
 18a:	60 95       	com	r22
 18c:	70 95       	com	r23
 18e:	80 95       	com	r24
 190:	90 95       	com	r25
 192:	9b 01       	movw	r18, r22
 194:	ac 01       	movw	r20, r24
 196:	bd 01       	movw	r22, r26
 198:	cf 01       	movw	r24, r30
 19a:	08 95       	ret

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
