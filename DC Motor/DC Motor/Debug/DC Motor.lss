
DC Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000240  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e5  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000190  00000000  00000000  00000525  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a1  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000008bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup_motor>:
		_delay_ms(1000);
    }
}
void setup_motor()
{
	MOTORDDR |= (1<<M1);
  80:	57 9a       	sbi	0x0a, 7	; 10
	MOTORDDR |= (1<<M0);
  82:	56 9a       	sbi	0x0a, 6	; 10
  84:	08 95       	ret

00000086 <forword_motor>:
}
void forword_motor()
{
	MOTORPORT |= (1<<M0);
  86:	5e 9a       	sbi	0x0b, 6	; 11
	MOTORPORT &= ~(1<<M1);
  88:	5f 98       	cbi	0x0b, 7	; 11
  8a:	08 95       	ret

0000008c <revers_motor>:
}
void revers_motor()
{
	MOTORPORT &= ~(1<<M0);
  8c:	5e 98       	cbi	0x0b, 6	; 11
	MOTORPORT |= (1<<M1);
  8e:	5f 9a       	sbi	0x0b, 7	; 11
  90:	08 95       	ret

00000092 <stop_motor>:
}
void stop_motor()
{
	MOTORPORT &= ~(1<<M0);
  92:	5e 98       	cbi	0x0b, 6	; 11
	MOTORPORT &= ~(1<<M1);
  94:	5f 98       	cbi	0x0b, 7	; 11
  96:	08 95       	ret

00000098 <main>:
void revers_motor();
void stop_motor();

int main(void)
{
    setup_motor();
  98:	0e 94 40 00 	call	0x80	; 0x80 <setup_motor>
	
	while (1) 
    {
		forword_motor();
  9c:	0e 94 43 00 	call	0x86	; 0x86 <forword_motor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	8b e7       	ldi	r24, 0x7B	; 123
  a4:	92 e9       	ldi	r25, 0x92	; 146
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0xe>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x18>
  b0:	00 00       	nop
		_delay_ms(3000);
		stop_motor();
  b2:	0e 94 49 00 	call	0x92	; 0x92 <stop_motor>
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	83 ed       	ldi	r24, 0xD3	; 211
  ba:	90 e3       	ldi	r25, 0x30	; 48
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x24>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x2e>
  c6:	00 00       	nop
		_delay_ms(1000);
		revers_motor();
  c8:	0e 94 46 00 	call	0x8c	; 0x8c <revers_motor>
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	8b e7       	ldi	r24, 0x7B	; 123
  d0:	92 e9       	ldi	r25, 0x92	; 146
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x3a>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x44>
  dc:	00 00       	nop
		_delay_ms(3000);
		stop_motor();
  de:	0e 94 49 00 	call	0x92	; 0x92 <stop_motor>
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	83 ed       	ldi	r24, 0xD3	; 211
  e6:	90 e3       	ldi	r25, 0x30	; 48
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x50>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x5a>
  f2:	00 00       	nop
  f4:	d3 cf       	rjmp	.-90     	; 0x9c <main+0x4>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
