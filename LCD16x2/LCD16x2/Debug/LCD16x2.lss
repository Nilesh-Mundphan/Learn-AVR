
LCD16x2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000138  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002dc  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015d  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000187  00000000  00000000  000006a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000197  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a2  00000000  00000000  00000a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000ad5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 93 00 	call	0x126	; 0x126 <main>
  8e:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_cmd>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	ef e7       	ldi	r30, 0x7F	; 127
  98:	fe e3       	ldi	r31, 0x3E	; 62
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_cmd+0x4>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_cmd+0xa>
  a0:	00 00       	nop
	lcd_cmd(0x80);
}
void lcd_cmd(char cmd)
{
    _delay_ms(4);
	LCDDATAPORT = cmd;
  a2:	8b b9       	out	0x0b, r24	; 11

	LCDCNTPORT &= ~(1<<RS);
  a4:	28 98       	cbi	0x05, 0	; 5
	LCDCNTPORT &= ~(1<<RW);
  a6:	29 98       	cbi	0x05, 1	; 5
	LCDCNTPORT |= (1<<EN);
  a8:	2a 9a       	sbi	0x05, 2	; 5
  aa:	8f e7       	ldi	r24, 0x7F	; 127
  ac:	9e e3       	ldi	r25, 0x3E	; 62
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_cmd+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_cmd+0x1e>
  b4:	00 00       	nop
	_delay_ms(4);
	LCDCNTPORT &= ~(1<<EN);
  b6:	2a 98       	cbi	0x05, 2	; 5
  b8:	08 95       	ret

000000ba <lcd_init>:
    }
}

void lcd_init(void)
{
	LCDDATADDR = 0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a b9       	out	0x0a, r24	; 10
	LCDCNTDDR |= (1<<RS);
  be:	20 9a       	sbi	0x04, 0	; 4
	LCDCNTDDR |= (1<<RW);
  c0:	21 9a       	sbi	0x04, 1	; 4
	LCDCNTDDR |= (1<<EN);
  c2:	22 9a       	sbi	0x04, 2	; 4
	 
	lcd_cmd(0x38);
  c4:	88 e3       	ldi	r24, 0x38	; 56
  c6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
	lcd_cmd(0x0C);
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
	lcd_cmd(0x01);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
	lcd_cmd(0x06);
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
	lcd_cmd(0x80);
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_cmd>
  e2:	08 95       	ret

000000e4 <lcd_data>:
  e4:	ef e7       	ldi	r30, 0x7F	; 127
  e6:	fe e3       	ldi	r31, 0x3E	; 62
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_data+0x4>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_data+0xa>
  ee:	00 00       	nop
	LCDCNTPORT &= ~(1<<EN);
}
void lcd_data(char ldata)
{
	_delay_ms(4);
	LCDDATAPORT = ldata;
  f0:	8b b9       	out	0x0b, r24	; 11

	LCDCNTPORT |= (1<<RS);
  f2:	28 9a       	sbi	0x05, 0	; 5
	LCDCNTPORT &= ~(1<<RW);
  f4:	29 98       	cbi	0x05, 1	; 5
	LCDCNTPORT |= (1<<EN);
  f6:	2a 9a       	sbi	0x05, 2	; 5
  f8:	8f e7       	ldi	r24, 0x7F	; 127
  fa:	9e e3       	ldi	r25, 0x3E	; 62
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_data+0x18>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_data+0x1e>
 102:	00 00       	nop
	_delay_ms(4);
	LCDCNTPORT &= ~(1<<EN);
 104:	2a 98       	cbi	0x05, 2	; 5
 106:	08 95       	ret

00000108 <lcd_print>:
}
void lcd_print(char* str)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
	while(*str)
 10e:	88 81       	ld	r24, Y
 110:	88 23       	and	r24, r24
 112:	31 f0       	breq	.+12     	; 0x120 <lcd_print+0x18>
 114:	21 96       	adiw	r28, 0x01	; 1
		lcd_data(*str++);
 116:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_data>
	_delay_ms(4);
	LCDCNTPORT &= ~(1<<EN);
}
void lcd_print(char* str)
{
	while(*str)
 11a:	89 91       	ld	r24, Y+
 11c:	81 11       	cpse	r24, r1
 11e:	fb cf       	rjmp	.-10     	; 0x116 <lcd_print+0xe>
		lcd_data(*str++);
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <main>:
void lcd_data(char ldata);
void lcd_print(char* str);

int main(void)
{
    lcd_init();
 126:	0e 94 5d 00 	call	0xba	; 0xba <lcd_init>
	lcd_print("Hello Word !!!");
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 84 00 	call	0x108	; 0x108 <lcd_print>
    while (1) 
    {
    }
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0xc>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
